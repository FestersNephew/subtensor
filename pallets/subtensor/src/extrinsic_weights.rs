
//! Autogenerated weights for `pallet_subtensor`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `morpheus`, CPU: `AMD EPYC 7513 32-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-subtensor
// benchmark
// pallet
// --chain=local
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_subtensor
// --extrinsic=*
// --output=./pallets/subtensor/src/extrinsic_weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subtensor`.
pub trait WeightInfo {
	fn set_weights() -> Weight;
	fn become_delegate() -> Weight;
	fn add_stake() -> Weight;
	fn serve_axon() -> Weight;
	fn remove_stake() -> Weight;
	fn serve_prometheus() -> Weight;
	fn burned_register() -> Weight;
	fn root_register() -> Weight;
	fn register_network() -> Weight;
	fn dissolve_network() -> Weight;
	fn swap_hotkey() -> Weight;
}

/// Weights for `pallet_subtensor` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:0)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:0)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::WeightsVersionKey` (r:1 w:0)
	/// Proof: `Subtensor::WeightsVersionKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:4096 w:0)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:0)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:1 w:0)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:1 w:0)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Weights` (r:0 w:1)
	/// Proof: `Subtensor::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `188462`
		//  Estimated: `10327052`
		// Minimum execution time: 21_685_171_000 picoseconds.
		Weight::from_parts(22_927_418_000, 10327052)
			.saturating_add(T::DbWeight::get().reads(4104_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Subtensor::DefaultTake` (r:1 w:0)
	/// Proof: `Subtensor::DefaultTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:1)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn become_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `4435`
		// Minimum execution time: 46_020_000 picoseconds.
		Weight::from_parts(54_150_000, 4435)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:0)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:1 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1262`
		//  Estimated: `4727`
		// Minimum execution time: 91_339_000 picoseconds.
		Weight::from_parts(94_199_000, 4727)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Subtensor::IsNetworkMember` (r:2 w:0)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Axons` (r:1 w:1)
	/// Proof: `Subtensor::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ServingRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn serve_axon() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `660`
		//  Estimated: `6600`
		// Minimum execution time: 39_919_000 picoseconds.
		Weight::from_parts(43_879_000, 6600)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:0)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:1 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1519`
		//  Estimated: `4984`
		// Minimum execution time: 89_359_000 picoseconds.
		Weight::from_parts(91_009_000, 4984)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Subtensor::IsNetworkMember` (r:2 w:0)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Prometheus` (r:1 w:1)
	/// Proof: `Subtensor::Prometheus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ServingRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn serve_prometheus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `6568`
		// Minimum execution time: 37_269_000 picoseconds.
		Weight::from_parts(38_450_000, 6568)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `Subtensor::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Subtensor::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:1)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Burn` (r:1 w:0)
	/// Proof: `Subtensor::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:1)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:1 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:1 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:1 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:1 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:1 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:1 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:1 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:1 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RAORecycledForRegistration` (r:1 w:1)
	/// Proof: `Subtensor::RAORecycledForRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:0 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BlockAtRegistration` (r:0 w:1)
	/// Proof: `Subtensor::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:0 w:1)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burned_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825`
		//  Estimated: `4290`
		// Minimum execution time: 155_858_000 picoseconds.
		Weight::from_parts(159_409_000, 4290)
			.saturating_add(T::DbWeight::get().reads(26_u64))
			.saturating_add(T::DbWeight::get().writes(24_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Subtensor::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:1)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:1 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:1 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:1 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:1 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:1 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:1 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:1 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:1 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:1)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BlockAtRegistration` (r:0 w:1)
	/// Proof: `Subtensor::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:0 w:1)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn root_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1271`
		//  Estimated: `4736`
		// Minimum execution time: 116_869_000 picoseconds.
		Weight::from_parts(128_879_000, 4736)
			.saturating_add(T::DbWeight::get().reads(21_u64))
			.saturating_add(T::DbWeight::get().writes(19_u64))
	}
	/// Storage: `Subtensor::NetworkLastRegistered` (r:1 w:1)
	/// Proof: `Subtensor::NetworkLastRegistered` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::NetworkRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkLastLockCost` (r:1 w:1)
	/// Proof: `Subtensor::NetworkLastLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkMinLockCost` (r:1 w:0)
	/// Proof: `Subtensor::NetworkMinLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkLockReductionInterval` (r:1 w:0)
	/// Proof: `Subtensor::NetworkLockReductionInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:1)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLimit` (r:1 w:0)
	/// Proof: `Subtensor::SubnetLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:1)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegistrationAllowed` (r:1 w:1)
	/// Proof: `Subtensor::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalSubnetDefaultNetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `Subtensor::GlobalSubnetDefaultNetworkRegistrationAllowed` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:1)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalMaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::GlobalMaxAllowedUids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedValidators` (r:1 w:1)
	/// Proof: `Subtensor::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxAllowedValidators` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxAllowedValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:1 w:1)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinAllowedWeights` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinAllowedWeights` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightLimit` (r:1 w:0)
	/// Proof: `Subtensor::MaxWeightLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxWeightLimit` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxWeightLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::AdjustmentInterval` (r:1 w:1)
	/// Proof: `Subtensor::AdjustmentInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultAdjustmentInterval` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultAdjustmentInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:1)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultTargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultTargetRegistrationsPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::AdjustmentAlpha` (r:1 w:1)
	/// Proof: `Subtensor::AdjustmentAlpha` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultAdjustmentAlpha` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultAdjustmentAlpha` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ImmunityPeriod` (r:1 w:1)
	/// Proof: `Subtensor::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultImmunityPeriod` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinBurn` (r:1 w:1)
	/// Proof: `Subtensor::MinBurn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinBurn` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinDifficulty` (r:1 w:1)
	/// Proof: `Subtensor::MinDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinDifficulty` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinDifficulty` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxDifficulty` (r:1 w:1)
	/// Proof: `Subtensor::MaxDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxDifficulty` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxDifficulty` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Kappa` (r:1 w:1)
	/// Proof: `Subtensor::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Difficulty` (r:1 w:1)
	/// Proof: `Subtensor::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ActivityCutoff` (r:1 w:1)
	/// Proof: `Subtensor::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::EmissionValues` (r:1 w:1)
	/// Proof: `Subtensor::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLocked` (r:0 w:1)
	/// Proof: `Subtensor::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `Subtensor::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetOwner` (r:0 w:1)
	/// Proof: `Subtensor::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkModality` (r:0 w:1)
	/// Proof: `Subtensor::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Tempo` (r:0 w:1)
	/// Proof: `Subtensor::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:0 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `728`
		//  Estimated: `4193`
		// Minimum execution time: 183_558_000 picoseconds.
		Weight::from_parts(191_887_000, 4193)
			.saturating_add(T::DbWeight::get().reads(40_u64))
			.saturating_add(T::DbWeight::get().writes(30_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:1)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetOwner` (r:1 w:1)
	/// Proof: `Subtensor::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLocked` (r:1 w:1)
	/// Proof: `Subtensor::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:1)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::Kappa` (r:0 w:1)
	/// Proof: `Subtensor::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:0 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `Subtensor::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:0 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::EmissionValues` (r:0 w:1)
	/// Proof: `Subtensor::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:0 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:0 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:0 w:1)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:0 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkModality` (r:0 w:1)
	/// Proof: `Subtensor::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Tempo` (r:0 w:1)
	/// Proof: `Subtensor::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Difficulty` (r:0 w:1)
	/// Proof: `Subtensor::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:0 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:0 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:0 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:0 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:0 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:0 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ImmunityPeriod` (r:0 w:1)
	/// Proof: `Subtensor::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ActivityCutoff` (r:0 w:1)
	/// Proof: `Subtensor::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:0 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:0 w:1)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::POWRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 100_949_000 picoseconds.
		Weight::from_parts(107_079_000, 4259)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(31_u64))
	}
	/// Storage: `Subtensor::Owner` (r:1 w:2)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:2 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:3 w:2)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:0)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:2)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:2)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:257 w:512)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Axons` (r:1 w:0)
	/// Proof: `Subtensor::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:2)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LoadedEmission` (r:1 w:1)
	/// Proof: `Subtensor::LoadedEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn swap_hotkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `18643`
		//  Estimated: `655708`
		// Minimum execution time: 2_150_357_000 picoseconds.
		Weight::from_parts(2_243_836_000, 655708)
			.saturating_add(T::DbWeight::get().reads(272_u64))
			.saturating_add(T::DbWeight::get().writes(527_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:0)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:0)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::WeightsVersionKey` (r:1 w:0)
	/// Proof: `Subtensor::WeightsVersionKey` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:4096 w:0)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:0)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:1 w:0)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:1 w:0)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Weights` (r:0 w:1)
	/// Proof: `Subtensor::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `188462`
		//  Estimated: `10327052`
		// Minimum execution time: 21_685_171_000 picoseconds.
		Weight::from_parts(22_927_418_000, 10327052)
			.saturating_add(RocksDbWeight::get().reads(4104_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Subtensor::DefaultTake` (r:1 w:0)
	/// Proof: `Subtensor::DefaultTake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:1)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn become_delegate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `4435`
		// Minimum execution time: 46_020_000 picoseconds.
		Weight::from_parts(54_150_000, 4435)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:0)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:1 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1262`
		//  Estimated: `4727`
		// Minimum execution time: 91_339_000 picoseconds.
		Weight::from_parts(94_199_000, 4727)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Subtensor::IsNetworkMember` (r:2 w:0)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Axons` (r:1 w:1)
	/// Proof: `Subtensor::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ServingRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn serve_axon() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `660`
		//  Estimated: `6600`
		// Minimum execution time: 39_919_000 picoseconds.
		Weight::from_parts(43_879_000, 6600)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:0)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:1 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:1 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalColdkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalColdkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalStake` (r:1 w:1)
	/// Proof: `Subtensor::TotalStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1519`
		//  Estimated: `4984`
		// Minimum execution time: 89_359_000 picoseconds.
		Weight::from_parts(91_009_000, 4984)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Subtensor::IsNetworkMember` (r:2 w:0)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Prometheus` (r:1 w:1)
	/// Proof: `Subtensor::Prometheus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ServingRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::ServingRateLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn serve_prometheus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `628`
		//  Estimated: `6568`
		// Minimum execution time: 37_269_000 picoseconds.
		Weight::from_parts(38_450_000, 6568)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `Subtensor::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Subtensor::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:1)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Burn` (r:1 w:0)
	/// Proof: `Subtensor::Burn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:1)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:1 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:1 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:1 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:1 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:1 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:1 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:1 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:1 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RAORecycledForRegistration` (r:1 w:1)
	/// Proof: `Subtensor::RAORecycledForRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:0 w:1)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BlockAtRegistration` (r:0 w:1)
	/// Proof: `Subtensor::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:0 w:1)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn burned_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `825`
		//  Estimated: `4290`
		// Minimum execution time: 155_858_000 picoseconds.
		Weight::from_parts(159_409_000, 4290)
			.saturating_add(RocksDbWeight::get().reads(26_u64))
			.saturating_add(RocksDbWeight::get().writes(24_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:0)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisBlock` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `Subtensor::MaxRegistrationsPerBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:1)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Owner` (r:1 w:0)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:1 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:1 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:1 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:1 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:1 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:1 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:1 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:1 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:1 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:1 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:1 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:1)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BlockAtRegistration` (r:0 w:1)
	/// Proof: `Subtensor::BlockAtRegistration` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:0 w:1)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn root_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1271`
		//  Estimated: `4736`
		// Minimum execution time: 116_869_000 picoseconds.
		Weight::from_parts(128_879_000, 4736)
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(19_u64))
	}
	/// Storage: `Subtensor::NetworkLastRegistered` (r:1 w:1)
	/// Proof: `Subtensor::NetworkLastRegistered` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::NetworkRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkLastLockCost` (r:1 w:1)
	/// Proof: `Subtensor::NetworkLastLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkMinLockCost` (r:1 w:0)
	/// Proof: `Subtensor::NetworkMinLockCost` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkLockReductionInterval` (r:1 w:0)
	/// Proof: `Subtensor::NetworkLockReductionInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:1)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLimit` (r:1 w:0)
	/// Proof: `Subtensor::SubnetLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:1)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegistrationAllowed` (r:1 w:1)
	/// Proof: `Subtensor::NetworkRegistrationAllowed` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalSubnetDefaultNetworkRegistrationAllowed` (r:1 w:0)
	/// Proof: `Subtensor::GlobalSubnetDefaultNetworkRegistrationAllowed` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:1 w:1)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalMaxAllowedUids` (r:1 w:0)
	/// Proof: `Subtensor::GlobalMaxAllowedUids` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedValidators` (r:1 w:1)
	/// Proof: `Subtensor::MaxAllowedValidators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxAllowedValidators` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxAllowedValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:1 w:1)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinAllowedWeights` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinAllowedWeights` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightLimit` (r:1 w:0)
	/// Proof: `Subtensor::MaxWeightLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxWeightLimit` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxWeightLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::AdjustmentInterval` (r:1 w:1)
	/// Proof: `Subtensor::AdjustmentInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultAdjustmentInterval` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultAdjustmentInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TargetRegistrationsPerInterval` (r:1 w:1)
	/// Proof: `Subtensor::TargetRegistrationsPerInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultTargetRegistrationsPerInterval` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultTargetRegistrationsPerInterval` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::AdjustmentAlpha` (r:1 w:1)
	/// Proof: `Subtensor::AdjustmentAlpha` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultAdjustmentAlpha` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultAdjustmentAlpha` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ImmunityPeriod` (r:1 w:1)
	/// Proof: `Subtensor::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultImmunityPeriod` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinBurn` (r:1 w:1)
	/// Proof: `Subtensor::MinBurn` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinBurn` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinBurn` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinDifficulty` (r:1 w:1)
	/// Proof: `Subtensor::MinDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMinDifficulty` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMinDifficulty` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxDifficulty` (r:1 w:1)
	/// Proof: `Subtensor::MaxDifficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::GlobalDefaultMaxDifficulty` (r:1 w:0)
	/// Proof: `Subtensor::GlobalDefaultMaxDifficulty` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Kappa` (r:1 w:1)
	/// Proof: `Subtensor::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Difficulty` (r:1 w:1)
	/// Proof: `Subtensor::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ActivityCutoff` (r:1 w:1)
	/// Proof: `Subtensor::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::EmissionValues` (r:1 w:1)
	/// Proof: `Subtensor::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::POWRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:1 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLocked` (r:0 w:1)
	/// Proof: `Subtensor::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `Subtensor::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetOwner` (r:0 w:1)
	/// Proof: `Subtensor::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkModality` (r:0 w:1)
	/// Proof: `Subtensor::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Tempo` (r:0 w:1)
	/// Proof: `Subtensor::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:0 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `728`
		//  Estimated: `4193`
		// Minimum execution time: 183_558_000 picoseconds.
		Weight::from_parts(191_887_000, 4193)
			.saturating_add(RocksDbWeight::get().reads(40_u64))
			.saturating_add(RocksDbWeight::get().writes(30_u64))
	}
	/// Storage: `Subtensor::NetworksAdded` (r:1 w:1)
	/// Proof: `Subtensor::NetworksAdded` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetOwner` (r:1 w:1)
	/// Proof: `Subtensor::SubnetOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetLocked` (r:1 w:1)
	/// Proof: `Subtensor::SubnetLocked` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:1)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::Kappa` (r:0 w:1)
	/// Proof: `Subtensor::Kappa` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Active` (r:0 w:1)
	/// Proof: `Subtensor::Active` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkRegisteredAt` (r:0 w:1)
	/// Proof: `Subtensor::NetworkRegisteredAt` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::RegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::RegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorTrust` (r:0 w:1)
	/// Proof: `Subtensor::ValidatorTrust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::EmissionValues` (r:0 w:1)
	/// Proof: `Subtensor::EmissionValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::PruningScores` (r:0 w:1)
	/// Proof: `Subtensor::PruningScores` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ValidatorPermit` (r:0 w:1)
	/// Proof: `Subtensor::ValidatorPermit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MinAllowedWeights` (r:0 w:1)
	/// Proof: `Subtensor::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::BurnRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::BurnRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastUpdate` (r:0 w:1)
	/// Proof: `Subtensor::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::NetworkModality` (r:0 w:1)
	/// Proof: `Subtensor::NetworkModality` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Tempo` (r:0 w:1)
	/// Proof: `Subtensor::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Difficulty` (r:0 w:1)
	/// Proof: `Subtensor::Difficulty` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Dividends` (r:0 w:1)
	/// Proof: `Subtensor::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Incentive` (r:0 w:1)
	/// Proof: `Subtensor::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Trust` (r:0 w:1)
	/// Proof: `Subtensor::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxWeightsLimit` (r:0 w:1)
	/// Proof: `Subtensor::MaxWeightsLimit` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Consensus` (r:0 w:1)
	/// Proof: `Subtensor::Consensus` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Emission` (r:0 w:1)
	/// Proof: `Subtensor::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::SubnetworkN` (r:0 w:1)
	/// Proof: `Subtensor::SubnetworkN` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ImmunityPeriod` (r:0 w:1)
	/// Proof: `Subtensor::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::ActivityCutoff` (r:0 w:1)
	/// Proof: `Subtensor::ActivityCutoff` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Rank` (r:0 w:1)
	/// Proof: `Subtensor::Rank` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::MaxAllowedUids` (r:0 w:1)
	/// Proof: `Subtensor::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::POWRegistrationsThisInterval` (r:0 w:1)
	/// Proof: `Subtensor::POWRegistrationsThisInterval` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn dissolve_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `4259`
		// Minimum execution time: 100_949_000 picoseconds.
		Weight::from_parts(107_079_000, 4259)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(31_u64))
	}
	/// Storage: `Subtensor::Owner` (r:1 w:2)
	/// Proof: `Subtensor::Owner` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LastTxBlock` (r:2 w:1)
	/// Proof: `Subtensor::LastTxBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TxRateLimit` (r:1 w:0)
	/// Proof: `Subtensor::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::IsNetworkMember` (r:3 w:2)
	/// Proof: `Subtensor::IsNetworkMember` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalNetworks` (r:1 w:0)
	/// Proof: `Subtensor::TotalNetworks` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Subtensor::TotalIssuance` (r:1 w:1)
	/// Proof: `Subtensor::TotalIssuance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::TotalHotkeyStake` (r:1 w:2)
	/// Proof: `Subtensor::TotalHotkeyStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Delegates` (r:1 w:2)
	/// Proof: `Subtensor::Delegates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Stake` (r:257 w:512)
	/// Proof: `Subtensor::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Axons` (r:1 w:0)
	/// Proof: `Subtensor::Axons` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Uids` (r:1 w:2)
	/// Proof: `Subtensor::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::LoadedEmission` (r:1 w:1)
	/// Proof: `Subtensor::LoadedEmission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Subtensor::Keys` (r:0 w:1)
	/// Proof: `Subtensor::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn swap_hotkey() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `18643`
		//  Estimated: `655708`
		// Minimum execution time: 2_150_357_000 picoseconds.
		Weight::from_parts(2_243_836_000, 655708)
			.saturating_add(RocksDbWeight::get().reads(272_u64))
			.saturating_add(RocksDbWeight::get().writes(527_u64))
	}
}